import TelegramBot from 'node-telegram-bot-api';

interface TelegramConfig {
  token: string;
  channelId?: string; // ID –∫–∞–Ω–∞–ª—É –∞–±–æ —á–∞—Ç—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
}

interface SendResult {
  success: boolean;
  messages: TelegramBot.Message[];
  error?: string;
}

interface ParseModeOptions {
  parse_mode?: 'HTML' | 'Markdown' | 'MarkdownV2';
}

export class TelegramService {
  private bot: TelegramBot;
  private config: TelegramConfig;

  // Telegram –º–∞—î –ª—ñ–º—ñ—Ç 4096 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  private readonly MAX_MESSAGE_LENGTH = 4096;

  // –õ—ñ–º—ñ—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—ñ–≤ –ø—ñ–¥ –º–µ–¥—ñ–∞
  private readonly MAX_CAPTION_LENGTH = 1024;

  constructor(config: TelegramConfig) {
    this.config = config;
    this.bot = new TelegramBot(config.token, { polling: false });
  }

  /**
   * –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º Unicode —Å–∏–º–≤–æ–ª—ñ–≤
   */
  private getTextLength(text: string): number {
    return Array.from(text).length;
  }

  /**
   * –†–æ–∑–±–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º Unicode
   */
  private splitTextForMessages(
    text: string,
    maxLength: number = this.MAX_MESSAGE_LENGTH,
  ): string[] {
    const parts: string[] = [];
    const textArray = Array.from(text);

    let currentPart = '';
    let i = 0;

    while (i < textArray.length) {
      const char = textArray[i];
      const testPart = currentPart + char;

      if (this.getTextLength(testPart) <= maxLength) {
        currentPart = testPart;
        i++;
      } else {
        if (currentPart) {
          // –®—É–∫–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ä–æ–∑—Ä–∏–≤—É
          const breakPoints = ['\n\n', '\n', '. ', '! ', '? ', '; ', ', ', ' '];
          let bestBreakIndex = -1;
          let bestBreakLength = 0;

          for (const breakPoint of breakPoints) {
            const lastIndex = currentPart.lastIndexOf(breakPoint);
            if (
              lastIndex > bestBreakIndex &&
              lastIndex > currentPart.length - 100
            ) {
              bestBreakIndex = lastIndex;
              bestBreakLength = breakPoint.length;
              break; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π (–Ω–∞–π–∫—Ä–∞—â–∏–π)
            }
          }

          if (bestBreakIndex > 0) {
            // –†–æ–∑—Ä–∏–≤–∞—î–º–æ –ø–æ –∑–Ω–∞–π–¥–µ–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª–æ–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
            parts.push(
              currentPart.substring(0, bestBreakIndex + bestBreakLength).trim(),
            );
            currentPart =
              currentPart.substring(bestBreakIndex + bestBreakLength) + char;
          } else {
            // –†–æ–∑—Ä–∏–≤–∞—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            parts.push(currentPart.trim());
            currentPart = char;
          }
        } else {
          currentPart = char;
        }
        i++;
      }
    }

    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }

    return parts.filter((part) => part.length > 0);
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  private async sendSingleMessage(
    chatId: string | number,
    text: string,
    options: TelegramBot.SendMessageOptions = {},
  ): Promise<TelegramBot.Message> {
    try {
      const message = await this.bot.sendMessage(chatId, text, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options,
      });
      return message;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
   */
  async sendText(
    chatId: string | number,
    text: string,
    options: ParseModeOptions & { delay?: number } = {},
  ): Promise<SendResult> {
    const messages: TelegramBot.Message[] = [];
    const delay = options.delay || 500; // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –º—Å

    try {
      const textLength = this.getTextLength(text);

      if (textLength <= this.MAX_MESSAGE_LENGTH) {
        // –ü—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        console.log('üìù –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...');
        const message = await this.sendSingleMessage(chatId, text, options);
        messages.push(message);
        console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        console.log('üì® –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...');
        const textParts = this.splitTextForMessages(text);
        console.log(`üìä –†–æ–∑–±–∏—Ç–æ –Ω–∞ ${textParts.length} —á–∞—Å—Ç–∏–Ω`);

        for (let i = 0; i < textParts.length; i++) {
          const partText = textParts[i];
          const isFirst = i === 0;
          const isLast = i === textParts.length - 1;

          // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —á–∞—Å—Ç–∏–Ω —è–∫—â–æ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          let finalText = partText;
          if (textParts.length > 1) {
            if (isFirst) {
              finalText = `${partText}\n\n<i>üìé –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∏–∂—á–µ... (1/${textParts.length})</i>`;
            } else if (isLast) {
              finalText = `<i>üìé –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (${i + 1}/${textParts.length})</i>\n\n${partText}`;
            } else {
              finalText = `<i>üìé –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (${i + 1}/${textParts.length})</i>\n\n${partText}\n\n<i>üìé –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∏–∂—á–µ...</i>`;
            }
          }

          console.log(
            `üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω—É ${i + 1}/${textParts.length} (${this.getTextLength(partText)} —Å–∏–º–≤–æ–ª—ñ–≤)`,
          );

          const message = await this.sendSingleMessage(
            chatId,
            finalText,
            options,
          );
          messages.push(message);

          // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
          if (i < textParts.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }

        console.log('‚úÖ –í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      }

      return { success: true, messages };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
      return { success: false, messages, error: errorMessage };
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
   */
  async sendToChannel(
    text: string,
    options: ParseModeOptions & { delay?: number } = {},
  ): Promise<SendResult> {
    if (!this.config.channelId) {
      throw new Error('ID –∫–∞–Ω–∞–ª—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
    }

    return this.sendText(this.config.channelId, text, options);
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º (–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–æ–∑–±–∏—Ç—Ç—è–º –ø—ñ–¥–ø–∏—Å—É)
   */
  async sendPhoto(
    chatId: string | number,
    photo: string | Buffer,
    caption?: string,
    options: TelegramBot.SendPhotoOptions = {},
  ): Promise<SendResult> {
    const messages: TelegramBot.Message[] = [];

    try {
      if (!caption || this.getTextLength(caption) <= this.MAX_CAPTION_LENGTH) {
        // –ó–≤–∏—á–∞–π–Ω–µ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
        const message = await this.bot.sendPhoto(chatId, photo, {
          caption: caption,
          parse_mode: 'HTML',
          ...options,
        });
        messages.push(message);
        console.log('‚úÖ –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        // –§–æ—Ç–æ + –¥–æ–≤–≥–∏–π –ø—ñ–¥–ø–∏—Å —è–∫ –æ–∫—Ä–µ–º—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        console.log('üì∑ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –¥–æ–≤–≥–∏–º –ø—ñ–¥–ø–∏—Å–æ–º...');

        // –°–ø–æ—á–∞—Ç–∫—É —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
        const photoMessage = await this.bot.sendPhoto(chatId, photo, options);
        messages.push(photoMessage);

        // –ü–æ—Ç—ñ–º –ø—ñ–¥–ø–∏—Å —è–∫ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await new Promise((resolve) => setTimeout(resolve, 300));
        const textResult = await this.sendText(chatId, caption);
        messages.push(...textResult.messages);
      }

      return { success: true, messages };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', error);
      return { success: false, messages, error: errorMessage };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
   */
  async getBotInfo(): Promise<TelegramBot.User> {
    try {
      const botInfo = await this.bot.getMe();
      return botInfo;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç
   */
  async getChatInfo(chatId: string | number): Promise<TelegramBot.Chat> {
    try {
      const chatInfo = await this.bot.getChat(chatId);
      return chatInfo;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è Telegram HTML
   */
  static formatHTML(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
   */
  static bold(text: string): string {
    return `<b>${this.formatHTML(text)}</b>`;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å–∏–≤—É
   */
  static italic(text: string): string {
    return `<i>${this.formatHTML(text)}</i>`;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–¥—É
   */
  static code(text: string): string {
    return `<code>${this.formatHTML(text)}</code>`;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  static link(text: string, url: string): string {
    return `<a href="${url}">${this.formatHTML(text)}</a>`;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—É
   */
  async validateToken(): Promise<boolean> {
    try {
      await this.getBotInfo();
      return true;
    } catch {
      return false;
    }
  }
}
