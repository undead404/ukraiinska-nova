import { SpotifyService } from "./spotify.js";
import type {
  MusicRelease,
  ScrapingOptions,
  ScrapingStats,
} from "../types/index.js";
import * as fs from "fs/promises";

export class ReleaseScraper {
  private spotifyService: SpotifyService;

  constructor(spotifyService: SpotifyService) {
    this.spotifyService = spotifyService;
  }

  /**
   * –ó–±–∏—Ä–∞—î —Ä–µ–ª—ñ–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫—É –∞—Ä—Ç–∏—Å—Ç—ñ–≤
   */
  async scrapeReleases(
    artists: string[],
    options: ScrapingOptions
  ): Promise<{ releases: MusicRelease[]; stats: ScrapingStats }> {
    const startTime = Date.now();
    const allReleases: MusicRelease[] = [];
    const artistsStats: Record<string, number> = {};

    console.log("üéµ –ü–æ—á–∞—Ç–æ–∫ –∑–±–æ—Ä—É —Ä–µ–ª—ñ–∑—ñ–≤");
    console.log(`üìÖ –ü–µ—Ä—ñ–æ–¥: ${options.startDate} - ${options.endDate}`);
    console.log(`üë• –ê—Ä—Ç–∏—Å—Ç–∏: ${artists.join(", ")}`);
    console.log("-".repeat(60));

    for (let i = 0; i < artists.length; i++) {
      const artistName = artists[i];
      console.log(`\n[${i + 1}/${artists.length}] üé§ –û–±—Ä–æ–±–∫–∞: ${artistName}`);

      try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞—Ä—Ç–∏—Å—Ç–∞
        const artist = await this.spotifyService.searchArtist(artistName);

        if (!artist) {
          throw new Error(`  ‚ùå –ê—Ä—Ç–∏—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π: ${artistName}`);
        }

        console.log(
          `  ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: ${artist.name} (–ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: ${artist.popularity})`
        );

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–ª—ñ–∑–∏
        const releases = await this.spotifyService.getArtistReleases(
          artist.id,
          artist.name,
          options
        );

        allReleases.push(...releases);
        artistsStats[artist.name] = releases.length;

        console.log(`  üìÄ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª—ñ–∑—ñ–≤: ${releases.length}`);

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
        await this.delay(500);
      } catch (error) {
        console.error(`  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${artistName}:`, error);
        artistsStats[artistName] = 0;
      }
    }

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Ä–µ–ª—ñ–∑—É
    const sortedReleases = allReleases.sort((a, b) => {
      const timeDifference =
        new Date(a.releaseDate).getTime() - new Date(b.releaseDate).getTime();
      if (timeDifference === 0) {
        return (
          a.title.localeCompare(b.title, "uk") ||
          a.artist.localeCompare(b.artist, "uk")
        );
      }
      return timeDifference;
    });

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats: ScrapingStats = {
      totalReleases: sortedReleases.length,
      bySource: { Spotify: sortedReleases.length },
      byType: this.getCountByProperty(sortedReleases, "type"),
      byArtist: artistsStats,
      processingTime: Date.now() - startTime,
    };

    console.log("\n" + "=".repeat(60));
    console.log(`üéØ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª—ñ–∑—ñ–≤: ${sortedReleases.length}`);
    console.log(
      `‚è±Ô∏è  –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: ${(stats.processingTime / 1000).toFixed(1)}—Å`
    );

    return { releases: sortedReleases, stats };
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–ª—ñ–∑–∏ —É JSON —Ñ–∞–π–ª
   */
  async saveToFile(
    releases: MusicRelease[],
    filename = "spotify_releases.json"
  ): Promise<void> {
    try {
      const jsonData = JSON.stringify(releases, null, 2);
      await fs.writeFile(filename, jsonData, "utf-8");
      console.log(`üíæ –†–µ–ª—ñ–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: ${filename}`);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:", error);
      throw error;
    }
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–ª—ñ–∑–∏ —É CSV —Ñ–∞–π–ª
   */
  async saveToCsv(
    releases: MusicRelease[],
    filename = "spotify_releases.csv"
  ): Promise<void> {
    try {
      const headers = [
        "Artist",
        "Title",
        "Release Date",
        "Type",
        "Total Tracks",
        "Popularity",
        "Genres",
        "URL",
      ];

      const csvRows = [headers.join(",")];

      for (const release of releases) {
        const row = [
          this.escapeCsvField(release.artist),
          this.escapeCsvField(release.title),
          release.releaseDate,
          release.type,
          release.totalTracks.toString(),
          (release.popularity || 0).toString(),
          this.escapeCsvField(release.genres.join("; ")),
          release.url,
        ];
        csvRows.push(row.join(","));
      }

      await fs.writeFile(filename, csvRows.join("\n"), "utf-8");
      console.log(`üìä CSV —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${filename}`);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è CSV:", error);
      throw error;
    }
  }

  /**
   * –í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–ª—ñ–∑–∏ —É –∫–æ–Ω—Å–æ–ª—å
   */
  printReleases(releases: MusicRelease[]): void {
    console.log("\n" + "=".repeat(80));
    console.log("üéµ –ó–ù–ê–ô–î–ï–ù–Ü –ú–£–ó–ò–ß–ù–Ü –†–ï–õ–Ü–ó–ò");
    console.log("=".repeat(80));

    for (const release of releases) {
      console.log(`üìÖ ${release.releaseDate}`);
      console.log(`üéµ ${release.artist} - ${release.title}`);
      console.log(
        `üìÄ ${release.type.toUpperCase()}, ${release.totalTracks} —Ç—Ä–µ–∫—ñ–≤`
      );

      if (release.popularity !== undefined) {
        console.log(`‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: ${release.popularity}/100`);
      }

      if (release.genres.length > 0) {
        console.log(`üè∑Ô∏è  –ñ–∞–Ω—Ä–∏: ${release.genres.join(", ")}`);
      }

      console.log(`üîó ${release.url}`);
      console.log("-".repeat(50));
    }
  }

  /**
   * –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  printStats(stats: ScrapingStats): void {
    console.log("\n" + "=".repeat(60));
    console.log("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê");
    console.log("=".repeat(60));

    console.log(`üéØ –í—Å—å–æ–≥–æ —Ä–µ–ª—ñ–∑—ñ–≤: ${stats.totalReleases}`);
    console.log(
      `‚è±Ô∏è  –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: ${(stats.processingTime / 1000).toFixed(1)} —Å–µ–∫—É–Ω–¥`
    );

    console.log("\n–ü–æ —Ç–∏–ø–∞—Ö:");
    Object.entries(stats.byType).forEach(([type, count]) => {
      console.log(
        `üìÄ ${type.charAt(0).toUpperCase() + type.slice(1)}: ${count}`
      );
    });

    console.log("\n–ü–æ –∞—Ä—Ç–∏—Å—Ç–∞—Ö:");
    const sortedArtists = Object.entries(stats.byArtist)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10);

    sortedArtists.forEach(([artist, count]) => {
      console.log(`üé§ ${artist}: ${count} —Ä–µ–ª—ñ–∑—ñ–≤`);
    });
  }

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  private getCountByProperty<T>(
    array: T[],
    property: keyof T
  ): Record<string, number> {
    return array.reduce(
      (acc, item) => {
        const key = String(item[property]);
        acc[key] = (acc[key] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );
  }

  private escapeCsvField(field: string): string {
    if (field.includes(",") || field.includes('"') || field.includes("\n")) {
      return `"${field.replace(/"/g, '""')}"`;
    }
    return field;
  }
}
