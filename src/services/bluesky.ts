import { AtpAgent, BlobRef } from "@atproto/api";

interface BlueskyConfig {
  service: string;
  identifier: string;
  password: string;
}

interface ThreadPost {
  text: string;
  reply?: {
    root: { uri: string; cid: string };
    parent: { uri: string; cid: string };
  };
}

export class BlueskyService {
  private agent: AtpAgent;
  private config: BlueskyConfig;
  private isAuthenticated: boolean = false;

  // Bluesky –º–∞—î –ª—ñ–º—ñ—Ç 300 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –ø–æ—Å—Ç
  private readonly MAX_POST_LENGTH = 300;

  constructor(config: BlueskyConfig) {
    this.config = config;
    this.agent = new AtpAgent({
      service: config.service || "https://bsky.social",
    });
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ Bluesky
   */
  async login(): Promise<void> {
    try {
      await this.agent.login({
        identifier: this.config.identifier,
        password: this.config.password,
      });
      this.isAuthenticated = true;
      console.log("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –≤ Bluesky");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
      throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –≤ Bluesky");
    }
  }

  /**
   * –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º Unicode —Å–∏–º–≤–æ–ª—ñ–≤
   */
  private getTextLength(text: string): number {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Array.from –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É Unicode —Å–∏–º–≤–æ–ª—ñ–≤
    return Array.from(text).length;
  }

  /**
   * –†–æ–∑–±–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —Ç—Ä–µ–¥—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º Unicode
   */
  private splitTextForThread(text: string): string[] {
    const parts: string[] = [];
    const textArray = Array.from(text);

    let currentPart = "";
    let i = 0;

    while (i < textArray.length) {
      const char = textArray[i];
      const testPart = currentPart + char;

      if (this.getTextLength(testPart) <= this.MAX_POST_LENGTH) {
        currentPart = testPart;
        i++;
      } else {
        if (currentPart) {
          // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ–±—ñ–ª –∞–±–æ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–π –∑–Ω–∞–∫ –¥–ª—è —Ä–æ–∑—Ä–∏–≤—É
          //   const lastSpaceIndex = currentPart.lastIndexOf(" ");
          const lastNewlineIndex = currentPart.lastIndexOf("\n");
          //   const breakIndex = Math.max(lastSpaceIndex, lastNewlineIndex);
          const breakIndex = lastNewlineIndex;

          if (breakIndex > 0 && breakIndex > currentPart.length - 50) {
            // –†–æ–∑—Ä–∏–≤–∞—î–º–æ –ø–æ –ø—Ä–æ–±—ñ–ª—É/–Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É
            parts.push(currentPart.substring(0, breakIndex).trim());
            currentPart = currentPart.substring(breakIndex + 1) + char;
          } else {
            // –†–æ–∑—Ä–∏–≤–∞—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            parts.push(currentPart.trim());
            currentPart = char;
          }
        } else {
          // –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–µ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Ç—Ä–∞–ø–∏—Ç–∏—Å—è)
          currentPart = char;
        }
        i++;
      }
    }

    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }

    return parts.filter((part) => part.length > 0);
  }

  /**
   * –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
   */
  private async createPost(
    text: string,
    reply?: {
      root: { uri: string; cid: string };
      parent: { uri: string; cid: string };
    }
  ): Promise<{ uri: string; cid: string }> {
    if (!this.isAuthenticated) {
      throw new Error("–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è");
    }

    try {
      const response = await this.agent.post({
        text: text,
        reply: reply,
        createdAt: new Date().toISOString(),
      });

      return {
        uri: response.uri,
        cid: response.cid,
      };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞:", error);
      throw error;
    }
  }

  /**
   * –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î —Ç—Ä–µ–¥ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
   */
  async publishText(
    text: string
  ): Promise<{ success: boolean; posts: Array<{ uri: string; cid: string }> }> {
    if (!this.isAuthenticated) {
      await this.login();
    }

    const textLength = this.getTextLength(text);
    const posts: Array<{ uri: string; cid: string }> = [];

    try {
      if (textLength <= this.MAX_POST_LENGTH) {
        // –ü—Ä–æ—Å—Ç–∏–π –ø–æ—Å—Ç
        console.log("üìù –ü—É–±–ª—ñ–∫—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—Å—Ç...");
        const post = await this.createPost(text);
        posts.push(post);
        console.log("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!");
      } else {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–¥
        console.log("üßµ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–¥ –∑ –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Å—Ç—ñ–≤...");
        const textParts = this.splitTextForThread(text);
        console.log(`üìä –†–æ–∑–±–∏—Ç–æ –Ω–∞ ${textParts.length} —á–∞—Å—Ç–∏–Ω`);

        let rootPost: { uri: string; cid: string } | null = null;
        let parentPost: { uri: string; cid: string } | null = null;

        for (let i = 0; i < textParts.length; i++) {
          const partText = textParts[i];
          const isFirst = i === 0;

          console.log(
            `üì§ –ü—É–±–ª—ñ–∫—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É ${i + 1}/${textParts.length} (${this.getTextLength(partText)} —Å–∏–º–≤–æ–ª—ñ–≤)`
          );

          const reply =
            !isFirst && rootPost && parentPost
              ? {
                  root: rootPost,
                  parent: parentPost,
                }
              : undefined;

          const post = await this.createPost(partText, reply);
          posts.push(post);

          if (isFirst) {
            rootPost = post;
          }
          parentPost = post;

          // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏
          if (i < textParts.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        }

        console.log("‚úÖ –¢—Ä–µ–¥ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!");
      }

      return { success: true, posts };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:", error);
      return { success: false, posts };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å
   */
  async getProfile(): Promise<any> {
    if (!this.isAuthenticated) {
      await this.login();
    }

    try {
      const response = await this.agent.getProfile({
        actor: this.config.identifier,
      });
      return response.data;
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  isConnected(): boolean {
    return this.isAuthenticated;
  }
}
