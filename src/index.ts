import * as dotenv from 'dotenv';
import { SpotifyService } from './services/spotify.js';
import { ReleaseScraper } from './services/scraper.js';
import { ScrapingOptions } from './types/index.js';
import { readFile } from 'fs/promises';
import { BlueskyService } from './services/bluesky.js';
import translateAlbumType from './helpers/translate-album-type.js';
import { TelegramService } from './services/telegram.js';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

async function main(): Promise<void> {
  try {
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Spotify API
    const spotifyConfig = {
      clientId: process.env.SPOTIFY_CLIENT_ID || '',
      clientSecret: process.env.SPOTIFY_CLIENT_SECRET || '',
    };

    if (!spotifyConfig.clientId || !spotifyConfig.clientSecret) {
      throw new Error(
        '–í—ñ–¥—Å—É—Ç–Ω—ñ SPOTIFY_CLIENT_ID –∞–±–æ SPOTIFY_CLIENT_SECRET —É .env —Ñ–∞–π–ª—ñ',
      );
    }
    // –ó—á–∏—Ç–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –∞—Ä—Ç–∏—Å—Ç–∞–º–∏ –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const artistsFilePath =
      process.argv[2] && process.argv[2].trim() !== ''
        ? process.argv[2]
        : './artists.txt';

    // –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç—ñ–≤
    const artists = await readFile(artistsFilePath, 'utf-8').then((data) =>
      data
        // –û–∫—Ä–µ–º—ñ –∞—Ä—Ç–∏—Å—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö
        .split('\n')
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        .map((line) => line.trim())
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        .filter((line) => line.length > 0)
        // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        .filter((line, index, self) => self.indexOf(line) === index),
    );

    if (artists.length === 0) {
      throw new Error('–§–∞–π–ª artists.txt –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–∏—Ö –Ω–∞–∑–≤');
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É (–ª—ñ—Ç–æ 2025)
    // const endDate = new Date(2025, 7, 31).toISOString().split("T")[0];
    // const endDate = "2025-09-06";
    // const startDate = new Date();
    // startDate.setFullYear(2025, 5, 1); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –ª—ñ—Ç–∞ 2025
    // const startDateStr = startDate.toISOString().split("T")[0];
    // const startDateStr = "2025-09-06";

    // –í—á–æ—Ä–∞—à–Ω—è –¥–∞—Ç–∞
    const targetDate = new Date();
    targetDate.setDate(targetDate.getDate() - 1);
    const targetDateStr = targetDate.toISOString().split('T')[0];

    console.log(`üìÖ –¶—ñ–ª—å–æ–≤–∞ –¥–∞—Ç–∞: ${targetDateStr}`);

    const options: ScrapingOptions = {
      startDate: targetDateStr,
      endDate: targetDateStr,
      includeCompilations: false,
      includeAppears: true,
      country: 'UA',
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    console.log('üéµ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Ukraiinska Nova');
    console.log('='.repeat(50));

    const spotifyService = new SpotifyService(spotifyConfig);
    const scraper = new ReleaseScraper(spotifyService);

    // –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–ª—ñ–∑–∏
    const { releases, stats } = await scraper.scrapeReleases(artists, options);

    // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    scraper.printReleases(releases);
    scraper.printStats(stats);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª–∏
    await scraper.saveToFile(releases);
    await scraper.saveToCsv(
      releases,
      `archive/releases_${options.startDate}.csv`,
    );

    const summaryLines =
      releases.length === 0
        ? [
            'üöÄ –°—å–æ–≥–æ–¥–Ω—ñ –Ω–æ–≤–∏—Ö —Ä–µ–ª—ñ–∑—ñ–≤ –Ω–µ–º–∞—î! üöÄ',
            '–ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –∑ –Ω–∞–º–∏, –ø–æ–∫–∏ –ø—Ä–æ–¥–æ–≤–∂—É—é—á–∏ —Å–ª—É—Ö–∞—Ç–∏ –∫–ª–∞—Å–∏–∫—É! üéµüá∫üá¶',
          ]
        : [
            `–í—Å—ñ –Ω–æ–≤—ñ —Ä–µ–ª—ñ–∑–∏ –∑–∞ ${options.startDate}, –≤—Å—å–æ–≥–æ ${releases.length}üíø, –∞–±–æ ${releases.reduce((result, item) => result + item.totalTracks, 0)}üéµ`,
            '',
            ...releases.map(
              (r) =>
                `- ${r.artist} ‚Äî ${r.title} (${translateAlbumType(r.type)})`,
            ),
            '',
            '–î–∞–ª—ñ –±—É–¥–µ –±—ñ–ª—å—à–µ! üöÄ',
          ];

    const summaryText = summaryLines.join('\n');
    // –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —É Bluesky

    const bluesky = new BlueskyService({
      service: 'https://bsky.social',
      identifier: process.env.BLUESKY_IDENTIFIER!, // –∞–±–æ email
      password: process.env.BLUESKY_PASSWORD!, // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ App Password, –Ω–µ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–∞—Ä–æ–ª—å!
    });

    await bluesky.login();

    const telegram = new TelegramService({
      token: process.env.TELEGRAM_BOT_TOKEN!,
      channelId: '@ukraiinskanova', // –∞–±–æ ID —á–∞—Ç—É
    });

    const botInfo = await telegram.getBotInfo();
    console.log(`ü§ñ –ë–æ—Ç: @${botInfo.username}`);

    console.log('\nüìù –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —É Bluesky —ñ Telegram:');
    console.log(summaryText);

    if (!process.env.DEBUG) {
      console.log('\nüöÄ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —É Bluesky —ñ Telegram...');

      await Promise.all([
        bluesky.publishText(summaryText),
        telegram.sendToChannel(summaryText),
      ]);
    }

    console.log('\n‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  }
}

void main();
